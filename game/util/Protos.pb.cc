// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* ServerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameObject_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameObject_GameObjectType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestEvent_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TypeClientEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Direction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protos_2eproto() {
  protobuf_AddDesc_Protos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protos.proto");
  GOOGLE_CHECK(file != NULL);
  ServerEvent_descriptor_ = file->message_type(0);
  static const int ServerEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerEvent, id_),
  };
  ServerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerEvent_descriptor_,
      ServerEvent::default_instance_,
      ServerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerEvent));
  ClientEvent_descriptor_ = file->message_type(1);
  static const int ClientEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEvent, direction_),
  };
  ClientEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientEvent_descriptor_,
      ClientEvent::default_instance_,
      ClientEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientEvent));
  GameObject_descriptor_ = file->message_type(2);
  static const int GameObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, type_),
  };
  GameObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameObject_descriptor_,
      GameObject::default_instance_,
      GameObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameObject));
  GameObject_GameObjectType_descriptor_ = GameObject_descriptor_->enum_type(0);
  ServerState_descriptor_ = file->message_type(3);
  static const int ServerState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, events_),
  };
  ServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerState_descriptor_,
      ServerState::default_instance_,
      ServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerState));
  TestEvent_descriptor_ = file->message_type(4);
  static const int TestEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, gameobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, keypress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, direction_),
  };
  TestEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestEvent_descriptor_,
      TestEvent::default_instance_,
      TestEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestEvent));
  TestEvent_Type_descriptor_ = TestEvent_descriptor_->enum_type(0);
  TypeClientEvent_descriptor_ = file->enum_type(0);
  Direction_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerEvent_descriptor_, &ServerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientEvent_descriptor_, &ClientEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameObject_descriptor_, &GameObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerState_descriptor_, &ServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestEvent_descriptor_, &TestEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protos_2eproto() {
  delete ServerEvent::default_instance_;
  delete ServerEvent_reflection_;
  delete ClientEvent::default_instance_;
  delete ClientEvent_reflection_;
  delete GameObject::default_instance_;
  delete GameObject_reflection_;
  delete ServerState::default_instance_;
  delete ServerState_reflection_;
  delete TestEvent::default_instance_;
  delete TestEvent_reflection_;
}

void protobuf_AddDesc_Protos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Protos.proto\022\006protos\"\031\n\013ServerEvent\022\n\n"
    "\002id\030\001 \001(\005\"f\n\013ClientEvent\022\n\n\002id\030\001 \001(\005\022%\n\004"
    "type\030\002 \001(\0162\027.protos.TypeClientEvent\022$\n\td"
    "irection\030\003 \001(\0162\021.protos.Direction\"\200\001\n\nGa"
    "meObject\022\n\n\002id\030\001 \001(\005\022\016\n\006matrix\030\002 \003(\001\022/\n\004"
    "type\030\003 \001(\0162!.protos.GameObject.GameObjec"
    "tType\"%\n\016GameObjectType\022\n\n\006PLAYER\020\001\022\007\n\003H"
    "AT\020\002\"c\n\013ServerState\022\n\n\002id\030\001 \001(\005\022#\n\007objec"
    "ts\030\002 \003(\0132\022.protos.GameObject\022#\n\006events\030\003"
    " \003(\0132\023.protos.ServerEvent\"\350\001\n\tTestEvent\022"
    "\n\n\002id\030\001 \001(\005\022$\n\004type\030\002 \001(\0162\026.protos.TestE"
    "vent.Type\022&\n\ngameObject\030\003 \003(\0132\022.protos.G"
    "ameObject\022\016\n\006action\030\004 \001(\005\022\020\n\010keyPress\030\005 "
    "\001(\005\022\020\n\010clientID\030\006 \001(\005\022$\n\tdirection\030\007 \001(\016"
    "2\021.protos.Direction\"\'\n\004Type\022\t\n\005SPAWN\020\001\022\010"
    "\n\004MOVE\020\002\022\n\n\006ASSIGN\020\003*0\n\017TypeClientEvent\022"
    "\010\n\004MOVE\020\001\022\t\n\005SHOOT\020\002\022\010\n\004JUMP\020\003*M\n\tDirect"
    "ion\022\006\n\002UP\020\001\022\010\n\004DOWN\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT"
    "\020\004\022\013\n\007FORWARD\020\005\022\014\n\010BACKWARD\020\006", 749);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protos.proto", &protobuf_RegisterTypes);
  ServerEvent::default_instance_ = new ServerEvent();
  ClientEvent::default_instance_ = new ClientEvent();
  GameObject::default_instance_ = new GameObject();
  ServerState::default_instance_ = new ServerState();
  TestEvent::default_instance_ = new TestEvent();
  ServerEvent::default_instance_->InitAsDefaultInstance();
  ClientEvent::default_instance_->InitAsDefaultInstance();
  GameObject::default_instance_->InitAsDefaultInstance();
  ServerState::default_instance_->InitAsDefaultInstance();
  TestEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protos_2eproto {
  StaticDescriptorInitializer_Protos_2eproto() {
    protobuf_AddDesc_Protos_2eproto();
  }
} static_descriptor_initializer_Protos_2eproto_;
const ::google::protobuf::EnumDescriptor* TypeClientEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeClientEvent_descriptor_;
}
bool TypeClientEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Direction_descriptor_;
}
bool Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ServerEvent::kIdFieldNumber;
#endif  // !_MSC_VER

ServerEvent::ServerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.ServerEvent)
}

void ServerEvent::InitAsDefaultInstance() {
}

ServerEvent::ServerEvent(const ServerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.ServerEvent)
}

void ServerEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerEvent::~ServerEvent() {
  // @@protoc_insertion_point(destructor:protos.ServerEvent)
  SharedDtor();
}

void ServerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerEvent_descriptor_;
}

const ServerEvent& ServerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

ServerEvent* ServerEvent::default_instance_ = NULL;

ServerEvent* ServerEvent::New() const {
  return new ServerEvent;
}

void ServerEvent::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.ServerEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.ServerEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.ServerEvent)
  return false;
#undef DO_
}

void ServerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.ServerEvent)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.ServerEvent)
}

::google::protobuf::uint8* ServerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.ServerEvent)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.ServerEvent)
  return target;
}

int ServerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerEvent::MergeFrom(const ServerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerEvent::CopyFrom(const ServerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerEvent::IsInitialized() const {

  return true;
}

void ServerEvent::Swap(ServerEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerEvent_descriptor_;
  metadata.reflection = ServerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientEvent::kIdFieldNumber;
const int ClientEvent::kTypeFieldNumber;
const int ClientEvent::kDirectionFieldNumber;
#endif  // !_MSC_VER

ClientEvent::ClientEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.ClientEvent)
}

void ClientEvent::InitAsDefaultInstance() {
}

ClientEvent::ClientEvent(const ClientEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.ClientEvent)
}

void ClientEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientEvent::~ClientEvent() {
  // @@protoc_insertion_point(destructor:protos.ClientEvent)
  SharedDtor();
}

void ClientEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientEvent_descriptor_;
}

const ClientEvent& ClientEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

ClientEvent* ClientEvent::default_instance_ = NULL;

ClientEvent* ClientEvent::New() const {
  return new ClientEvent;
}

void ClientEvent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    type_ = 1;
    direction_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.ClientEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .protos.TypeClientEvent type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::TypeClientEvent_IsValid(value)) {
            set_type(static_cast< ::protos::TypeClientEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional .protos.Direction direction = 3;
      case 3: {
        if (tag == 24) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::Direction_IsValid(value)) {
            set_direction(static_cast< ::protos::Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.ClientEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.ClientEvent)
  return false;
#undef DO_
}

void ClientEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.ClientEvent)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .protos.TypeClientEvent type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .protos.Direction direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.ClientEvent)
}

::google::protobuf::uint8* ClientEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.ClientEvent)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .protos.TypeClientEvent type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .protos.Direction direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.ClientEvent)
  return target;
}

int ClientEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .protos.TypeClientEvent type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .protos.Direction direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientEvent::MergeFrom(const ClientEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEvent::CopyFrom(const ClientEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEvent::IsInitialized() const {

  return true;
}

void ClientEvent::Swap(ClientEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientEvent_descriptor_;
  metadata.reflection = ClientEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameObject_GameObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameObject_GameObjectType_descriptor_;
}
bool GameObject_GameObjectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameObject_GameObjectType GameObject::PLAYER;
const GameObject_GameObjectType GameObject::HAT;
const GameObject_GameObjectType GameObject::GameObjectType_MIN;
const GameObject_GameObjectType GameObject::GameObjectType_MAX;
const int GameObject::GameObjectType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameObject::kIdFieldNumber;
const int GameObject::kMatrixFieldNumber;
const int GameObject::kTypeFieldNumber;
#endif  // !_MSC_VER

GameObject::GameObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.GameObject)
}

void GameObject::InitAsDefaultInstance() {
}

GameObject::GameObject(const GameObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.GameObject)
}

void GameObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameObject::~GameObject() {
  // @@protoc_insertion_point(destructor:protos.GameObject)
  SharedDtor();
}

void GameObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameObject_descriptor_;
}

const GameObject& GameObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

GameObject* GameObject::default_instance_ = NULL;

GameObject* GameObject::New() const {
  return new GameObject;
}

void GameObject::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    id_ = 0;
    type_ = 1;
  }
  matrix_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.GameObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_matrix;
        break;
      }

      // repeated double matrix = 2;
      case 2: {
        if (tag == 17) {
         parse_matrix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_matrix())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_matrix;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .protos.GameObject.GameObjectType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::GameObject_GameObjectType_IsValid(value)) {
            set_type(static_cast< ::protos::GameObject_GameObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.GameObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.GameObject)
  return false;
#undef DO_
}

void GameObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.GameObject)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated double matrix = 2;
  for (int i = 0; i < this->matrix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->matrix(i), output);
  }

  // optional .protos.GameObject.GameObjectType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.GameObject)
}

::google::protobuf::uint8* GameObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.GameObject)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated double matrix = 2;
  for (int i = 0; i < this->matrix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->matrix(i), target);
  }

  // optional .protos.GameObject.GameObjectType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.GameObject)
  return target;
}

int GameObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .protos.GameObject.GameObjectType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated double matrix = 2;
  {
    int data_size = 0;
    data_size = 8 * this->matrix_size();
    total_size += 1 * this->matrix_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameObject::MergeFrom(const GameObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  matrix_.MergeFrom(from.matrix_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameObject::CopyFrom(const GameObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameObject::IsInitialized() const {

  return true;
}

void GameObject::Swap(GameObject* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    matrix_.Swap(&other->matrix_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameObject_descriptor_;
  metadata.reflection = GameObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerState::kIdFieldNumber;
const int ServerState::kObjectsFieldNumber;
const int ServerState::kEventsFieldNumber;
#endif  // !_MSC_VER

ServerState::ServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.ServerState)
}

void ServerState::InitAsDefaultInstance() {
}

ServerState::ServerState(const ServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.ServerState)
}

void ServerState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerState::~ServerState() {
  // @@protoc_insertion_point(destructor:protos.ServerState)
  SharedDtor();
}

void ServerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerState_descriptor_;
}

const ServerState& ServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

ServerState* ServerState::default_instance_ = NULL;

ServerState* ServerState::New() const {
  return new ServerState;
}

void ServerState::Clear() {
  id_ = 0;
  objects_.Clear();
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.ServerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        break;
      }

      // repeated .protos.GameObject objects = 2;
      case 2: {
        if (tag == 18) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        if (input->ExpectTag(26)) goto parse_events;
        break;
      }

      // repeated .protos.ServerEvent events = 3;
      case 3: {
        if (tag == 26) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_events;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.ServerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.ServerState)
  return false;
#undef DO_
}

void ServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.ServerState)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .protos.GameObject objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }

  // repeated .protos.ServerEvent events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.ServerState)
}

::google::protobuf::uint8* ServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.ServerState)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .protos.GameObject objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }

  // repeated .protos.ServerEvent events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.ServerState)
  return target;
}

int ServerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .protos.GameObject objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  // repeated .protos.ServerEvent events = 3;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerState::MergeFrom(const ServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerState::CopyFrom(const ServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerState::IsInitialized() const {

  return true;
}

void ServerState::Swap(ServerState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    objects_.Swap(&other->objects_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerState_descriptor_;
  metadata.reflection = ServerState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TestEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestEvent_Type_descriptor_;
}
bool TestEvent_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TestEvent_Type TestEvent::SPAWN;
const TestEvent_Type TestEvent::MOVE;
const TestEvent_Type TestEvent::ASSIGN;
const TestEvent_Type TestEvent::Type_MIN;
const TestEvent_Type TestEvent::Type_MAX;
const int TestEvent::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TestEvent::kIdFieldNumber;
const int TestEvent::kTypeFieldNumber;
const int TestEvent::kGameObjectFieldNumber;
const int TestEvent::kActionFieldNumber;
const int TestEvent::kKeyPressFieldNumber;
const int TestEvent::kClientIDFieldNumber;
const int TestEvent::kDirectionFieldNumber;
#endif  // !_MSC_VER

TestEvent::TestEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.TestEvent)
}

void TestEvent::InitAsDefaultInstance() {
}

TestEvent::TestEvent(const TestEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.TestEvent)
}

void TestEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  action_ = 0;
  keypress_ = 0;
  clientid_ = 0;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestEvent::~TestEvent() {
  // @@protoc_insertion_point(destructor:protos.TestEvent)
  SharedDtor();
}

void TestEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestEvent_descriptor_;
}

const TestEvent& TestEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

TestEvent* TestEvent::default_instance_ = NULL;

TestEvent* TestEvent::New() const {
  return new TestEvent;
}

void TestEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TestEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(action_, clientid_);
    id_ = 0;
    type_ = 1;
    direction_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gameobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.TestEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .protos.TestEvent.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::TestEvent_Type_IsValid(value)) {
            set_type(static_cast< ::protos::TestEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gameObject;
        break;
      }

      // repeated .protos.GameObject gameObject = 3;
      case 3: {
        if (tag == 26) {
         parse_gameObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameobject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gameObject;
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional int32 action = 4;
      case 4: {
        if (tag == 32) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_keyPress;
        break;
      }

      // optional int32 keyPress = 5;
      case 5: {
        if (tag == 40) {
         parse_keyPress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keypress_)));
          set_has_keypress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_clientID;
        break;
      }

      // optional int32 clientID = 6;
      case 6: {
        if (tag == 48) {
         parse_clientID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_direction;
        break;
      }

      // optional .protos.Direction direction = 7;
      case 7: {
        if (tag == 56) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::Direction_IsValid(value)) {
            set_direction(static_cast< ::protos::Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.TestEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.TestEvent)
  return false;
#undef DO_
}

void TestEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.TestEvent)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .protos.TestEvent.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .protos.GameObject gameObject = 3;
  for (int i = 0; i < this->gameobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gameobject(i), output);
  }

  // optional int32 action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }

  // optional int32 keyPress = 5;
  if (has_keypress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->keypress(), output);
  }

  // optional int32 clientID = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clientid(), output);
  }

  // optional .protos.Direction direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.TestEvent)
}

::google::protobuf::uint8* TestEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.TestEvent)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .protos.TestEvent.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .protos.GameObject gameObject = 3;
  for (int i = 0; i < this->gameobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gameobject(i), target);
  }

  // optional int32 action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }

  // optional int32 keyPress = 5;
  if (has_keypress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->keypress(), target);
  }

  // optional int32 clientID = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clientid(), target);
  }

  // optional .protos.Direction direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.TestEvent)
  return target;
}

int TestEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .protos.TestEvent.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional int32 keyPress = 5;
    if (has_keypress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keypress());
    }

    // optional int32 clientID = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }

    // optional .protos.Direction direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  // repeated .protos.GameObject gameObject = 3;
  total_size += 1 * this->gameobject_size();
  for (int i = 0; i < this->gameobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameobject(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestEvent::MergeFrom(const TestEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameobject_.MergeFrom(from.gameobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_keypress()) {
      set_keypress(from.keypress());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEvent::CopyFrom(const TestEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEvent::IsInitialized() const {

  return true;
}

void TestEvent::Swap(TestEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    gameobject_.Swap(&other->gameobject_);
    std::swap(action_, other->action_);
    std::swap(keypress_, other->keypress_);
    std::swap(clientid_, other->clientid_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestEvent_descriptor_;
  metadata.reflection = TestEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
