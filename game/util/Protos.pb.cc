// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_GameObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_GameObject_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_GameObject_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_GameObject_AnimationState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protos_2eproto() {
  protobuf_AddDesc_Protos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protos.proto");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, hatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, cameravector_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_Type_descriptor_ = Event_descriptor_->enum_type(0);
  Event_Direction_descriptor_ = Event_descriptor_->enum_type(1);
  Message_descriptor_ = file->message_type(1);
  static const int Message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, gameobject_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_GameObject_descriptor_ = Message_descriptor_->nested_type(0);
  static const int Message_GameObject_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, hattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, animationstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, health_),
  };
  Message_GameObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_GameObject_descriptor_,
      Message_GameObject::default_instance_,
      Message_GameObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_GameObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_GameObject));
  Message_GameObject_Type_descriptor_ = Message_GameObject_descriptor_->enum_type(0);
  Message_GameObject_AnimationState_descriptor_ = Message_GameObject_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_GameObject_descriptor_, &Message_GameObject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protos_2eproto() {
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Message_GameObject::default_instance_;
  delete Message_GameObject_reflection_;
}

void protobuf_AddDesc_Protos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Protos.proto\022\006protos\"\213\004\n\005Event\022\n\n\002id\030\001"
    " \001(\005\022 \n\004type\030\002 \001(\0162\022.protos.Event.Type\022\020"
    "\n\010clientID\030\003 \001(\005\022\r\n\005hatID\030\004 \001(\005\022\020\n\010bulle"
    "tID\030\005 \001(\005\022*\n\tdirection\030\006 \001(\0162\027.protos.Ev"
    "ent.Direction\022\024\n\014cameraVector\030\007 \003(\001\"\357\001\n\004"
    "Type\022\t\n\005SPAWN\020\001\022\010\n\004MOVE\020\002\022\010\n\004JUMP\020\003\022\n\n\006A"
    "SSIGN\020\004\022\t\n\005EQUIP\020\005\022\t\n\005DQUIP\020\006\022\t\n\005SHOOT\020\007"
    "\022\010\n\004HATR\020\010\022\010\n\004HATL\020\t\022\t\n\005PUNCH\020\n\022\021\n\rDELET"
    "E_BULLET\020\013\022\022\n\016PLAYER_PUNCHED\020\014\022\017\n\013PLAYER"
    "_DIED\020\r\022\020\n\014PROPELLER_UP\020\016\022\017\n\013PLAYER_JUMP"
    "\020\017\022\r\n\tGAME_OVER\020\020\022\022\n\016PLAYER_STUNNED\020\021\"m\n"
    "\tDirection\022\006\n\002UP\020\001\022\010\n\004DOWN\020\002\022\010\n\004LEFT\020\003\022\t"
    "\n\005RIGHT\020\004\022\013\n\007FORWARD\020\005\022\014\n\010BACKWARD\020\006\022\006\n\002"
    "FL\020\007\022\006\n\002BL\020\010\022\006\n\002FR\020\t\022\006\n\002BR\020\n\"\205\003\n\007Message"
    "\022\n\n\002id\030\001 \001(\005\022\034\n\005event\030\002 \003(\0132\r.protos.Eve"
    "nt\022.\n\ngameObject\030\003 \003(\0132\032.protos.Message."
    "GameObject\032\237\002\n\nGameObject\022\n\n\002id\030\001 \001(\005\022\016\n"
    "\006matrix\030\002 \003(\001\022-\n\004type\030\003 \001(\0162\037.protos.Mes"
    "sage.GameObject.Type\022\017\n\007hatType\030\004 \001(\005\022A\n"
    "\016animationState\030\005 \001(\0162).protos.Message.G"
    "ameObject.AnimationState\022\016\n\006health\030\006 \001(\005"
    "\"\'\n\004Type\022\n\n\006PLAYER\020\001\022\n\n\006BULLET\020\002\022\007\n\003HAT\020"
    "\003\"9\n\016AnimationState\022\014\n\010STANDING\020\001\022\013\n\007RUN"
    "NING\020\002\022\014\n\010PUNCHING\020\003", 940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protos.proto", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Message::default_instance_ = new Message();
  Message_GameObject::default_instance_ = new Message_GameObject();
  Event::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  Message_GameObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protos_2eproto {
  StaticDescriptorInitializer_Protos_2eproto() {
    protobuf_AddDesc_Protos_2eproto();
  }
} static_descriptor_initializer_Protos_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Type_descriptor_;
}
bool Event_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_Type Event::SPAWN;
const Event_Type Event::MOVE;
const Event_Type Event::JUMP;
const Event_Type Event::ASSIGN;
const Event_Type Event::EQUIP;
const Event_Type Event::DQUIP;
const Event_Type Event::SHOOT;
const Event_Type Event::HATR;
const Event_Type Event::HATL;
const Event_Type Event::PUNCH;
const Event_Type Event::DELETE_BULLET;
const Event_Type Event::PLAYER_PUNCHED;
const Event_Type Event::PLAYER_DIED;
const Event_Type Event::PROPELLER_UP;
const Event_Type Event::PLAYER_JUMP;
const Event_Type Event::GAME_OVER;
const Event_Type Event::PLAYER_STUNNED;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
const int Event::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Event_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Direction_descriptor_;
}
bool Event_Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_Direction Event::UP;
const Event_Direction Event::DOWN;
const Event_Direction Event::LEFT;
const Event_Direction Event::RIGHT;
const Event_Direction Event::FORWARD;
const Event_Direction Event::BACKWARD;
const Event_Direction Event::FL;
const Event_Direction Event::BL;
const Event_Direction Event::FR;
const Event_Direction Event::BR;
const Event_Direction Event::Direction_MIN;
const Event_Direction Event::Direction_MAX;
const int Event::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event::kIdFieldNumber;
const int Event::kTypeFieldNumber;
const int Event::kClientIDFieldNumber;
const int Event::kHatIDFieldNumber;
const int Event::kBulletIDFieldNumber;
const int Event::kDirectionFieldNumber;
const int Event::kCameraVectorFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.Event)
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  clientid_ = 0;
  hatid_ = 0;
  bulletid_ = 0;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:protos.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Event*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(clientid_, bulletid_);
    id_ = 0;
    type_ = 1;
    direction_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cameravector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .protos.Event.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::Event_Type_IsValid(value)) {
            set_type(static_cast< ::protos::Event_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clientID;
        break;
      }

      // optional int32 clientID = 3;
      case 3: {
        if (tag == 24) {
         parse_clientID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hatID;
        break;
      }

      // optional int32 hatID = 4;
      case 4: {
        if (tag == 32) {
         parse_hatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hatid_)));
          set_has_hatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bulletID;
        break;
      }

      // optional int32 bulletID = 5;
      case 5: {
        if (tag == 40) {
         parse_bulletID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_direction;
        break;
      }

      // optional .protos.Event.Direction direction = 6;
      case 6: {
        if (tag == 48) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::Event_Direction_IsValid(value)) {
            set_direction(static_cast< ::protos::Event_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_cameraVector;
        break;
      }

      // repeated double cameraVector = 7;
      case 7: {
        if (tag == 57) {
         parse_cameraVector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_cameravector())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cameravector())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_cameraVector;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.Event)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .protos.Event.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 clientID = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clientid(), output);
  }

  // optional int32 hatID = 4;
  if (has_hatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hatid(), output);
  }

  // optional int32 bulletID = 5;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bulletid(), output);
  }

  // optional .protos.Event.Direction direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->direction(), output);
  }

  // repeated double cameraVector = 7;
  for (int i = 0; i < this->cameravector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->cameravector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Event)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .protos.Event.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 clientID = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clientid(), target);
  }

  // optional int32 hatID = 4;
  if (has_hatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hatid(), target);
  }

  // optional int32 bulletID = 5;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bulletid(), target);
  }

  // optional .protos.Event.Direction direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->direction(), target);
  }

  // repeated double cameraVector = 7;
  for (int i = 0; i < this->cameravector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->cameravector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .protos.Event.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 clientID = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }

    // optional int32 hatID = 4;
    if (has_hatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hatid());
    }

    // optional int32 bulletID = 5;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletid());
    }

    // optional .protos.Event.Direction direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  // repeated double cameraVector = 7;
  {
    int data_size = 0;
    data_size = 8 * this->cameravector_size();
    total_size += 1 * this->cameravector_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  cameravector_.MergeFrom(from.cameravector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_hatid()) {
      set_hatid(from.hatid());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(clientid_, other->clientid_);
    std::swap(hatid_, other->hatid_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(direction_, other->direction_);
    cameravector_.Swap(&other->cameravector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_GameObject_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_GameObject_Type_descriptor_;
}
bool Message_GameObject_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_GameObject_Type Message_GameObject::PLAYER;
const Message_GameObject_Type Message_GameObject::BULLET;
const Message_GameObject_Type Message_GameObject::HAT;
const Message_GameObject_Type Message_GameObject::Type_MIN;
const Message_GameObject_Type Message_GameObject::Type_MAX;
const int Message_GameObject::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_GameObject_AnimationState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_GameObject_AnimationState_descriptor_;
}
bool Message_GameObject_AnimationState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_GameObject_AnimationState Message_GameObject::STANDING;
const Message_GameObject_AnimationState Message_GameObject::RUNNING;
const Message_GameObject_AnimationState Message_GameObject::PUNCHING;
const Message_GameObject_AnimationState Message_GameObject::AnimationState_MIN;
const Message_GameObject_AnimationState Message_GameObject::AnimationState_MAX;
const int Message_GameObject::AnimationState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message_GameObject::kIdFieldNumber;
const int Message_GameObject::kMatrixFieldNumber;
const int Message_GameObject::kTypeFieldNumber;
const int Message_GameObject::kHatTypeFieldNumber;
const int Message_GameObject::kAnimationStateFieldNumber;
const int Message_GameObject::kHealthFieldNumber;
#endif  // !_MSC_VER

Message_GameObject::Message_GameObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.Message.GameObject)
}

void Message_GameObject::InitAsDefaultInstance() {
}

Message_GameObject::Message_GameObject(const Message_GameObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.Message.GameObject)
}

void Message_GameObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  hattype_ = 0;
  animationstate_ = 1;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_GameObject::~Message_GameObject() {
  // @@protoc_insertion_point(destructor:protos.Message.GameObject)
  SharedDtor();
}

void Message_GameObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message_GameObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_GameObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_GameObject_descriptor_;
}

const Message_GameObject& Message_GameObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

Message_GameObject* Message_GameObject::default_instance_ = NULL;

Message_GameObject* Message_GameObject::New() const {
  return new Message_GameObject;
}

void Message_GameObject::Clear() {
  if (_has_bits_[0 / 32] & 61) {
    id_ = 0;
    type_ = 1;
    hattype_ = 0;
    animationstate_ = 1;
    health_ = 0;
  }
  matrix_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_GameObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.Message.GameObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_matrix;
        break;
      }

      // repeated double matrix = 2;
      case 2: {
        if (tag == 17) {
         parse_matrix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_matrix())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_matrix;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .protos.Message.GameObject.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::Message_GameObject_Type_IsValid(value)) {
            set_type(static_cast< ::protos::Message_GameObject_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hatType;
        break;
      }

      // optional int32 hatType = 4;
      case 4: {
        if (tag == 32) {
         parse_hatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hattype_)));
          set_has_hattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_animationState;
        break;
      }

      // optional .protos.Message.GameObject.AnimationState animationState = 5;
      case 5: {
        if (tag == 40) {
         parse_animationState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protos::Message_GameObject_AnimationState_IsValid(value)) {
            set_animationstate(static_cast< ::protos::Message_GameObject_AnimationState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_health;
        break;
      }

      // optional int32 health = 6;
      case 6: {
        if (tag == 48) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.Message.GameObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.Message.GameObject)
  return false;
#undef DO_
}

void Message_GameObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.Message.GameObject)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated double matrix = 2;
  for (int i = 0; i < this->matrix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->matrix(i), output);
  }

  // optional .protos.Message.GameObject.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 hatType = 4;
  if (has_hattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hattype(), output);
  }

  // optional .protos.Message.GameObject.AnimationState animationState = 5;
  if (has_animationstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->animationstate(), output);
  }

  // optional int32 health = 6;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.Message.GameObject)
}

::google::protobuf::uint8* Message_GameObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Message.GameObject)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated double matrix = 2;
  for (int i = 0; i < this->matrix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->matrix(i), target);
  }

  // optional .protos.Message.GameObject.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 hatType = 4;
  if (has_hattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hattype(), target);
  }

  // optional .protos.Message.GameObject.AnimationState animationState = 5;
  if (has_animationstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->animationstate(), target);
  }

  // optional int32 health = 6;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Message.GameObject)
  return target;
}

int Message_GameObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .protos.Message.GameObject.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 hatType = 4;
    if (has_hattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hattype());
    }

    // optional .protos.Message.GameObject.AnimationState animationState = 5;
    if (has_animationstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->animationstate());
    }

    // optional int32 health = 6;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  // repeated double matrix = 2;
  {
    int data_size = 0;
    data_size = 8 * this->matrix_size();
    total_size += 1 * this->matrix_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_GameObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_GameObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_GameObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_GameObject::MergeFrom(const Message_GameObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  matrix_.MergeFrom(from.matrix_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hattype()) {
      set_hattype(from.hattype());
    }
    if (from.has_animationstate()) {
      set_animationstate(from.animationstate());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_GameObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_GameObject::CopyFrom(const Message_GameObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_GameObject::IsInitialized() const {

  return true;
}

void Message_GameObject::Swap(Message_GameObject* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    matrix_.Swap(&other->matrix_);
    std::swap(type_, other->type_);
    std::swap(hattype_, other->hattype_);
    std::swap(animationstate_, other->animationstate_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_GameObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_GameObject_descriptor_;
  metadata.reflection = Message_GameObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message::kIdFieldNumber;
const int Message::kEventFieldNumber;
const int Message::kGameObjectFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:protos.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protos_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  id_ = 0;
  event_.Clear();
  gameobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event;
        break;
      }

      // repeated .protos.Event event = 2;
      case 2: {
        if (tag == 18) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event;
        if (input->ExpectTag(26)) goto parse_gameObject;
        break;
      }

      // repeated .protos.Message.GameObject gameObject = 3;
      case 3: {
        if (tag == 26) {
         parse_gameObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameobject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gameObject;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.Message)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .protos.Event event = 2;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event(i), output);
  }

  // repeated .protos.Message.GameObject gameObject = 3;
  for (int i = 0; i < this->gameobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gameobject(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Message)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .protos.Event event = 2;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event(i), target);
  }

  // repeated .protos.Message.GameObject gameObject = 3;
  for (int i = 0; i < this->gameobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gameobject(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .protos.Event event = 2;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  // repeated .protos.Message.GameObject gameObject = 3;
  total_size += 1 * this->gameobject_size();
  for (int i = 0; i < this->gameobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameobject(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  gameobject_.MergeFrom(from.gameobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    event_.Swap(&other->event_);
    gameobject_.Swap(&other->gameobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
